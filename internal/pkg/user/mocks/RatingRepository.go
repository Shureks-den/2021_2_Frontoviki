// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "yula/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// RatingRepository is an autogenerated mock type for the RatingRepository type
type RatingRepository struct {
	mock.Mock
}

// DeleteRating provides a mock function with given fields: rating
func (_m *RatingRepository) DeleteRating(rating *models.Rating) error {
	ret := _m.Called(rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Rating) error); ok {
		r0 = rf(rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRating provides a mock function with given fields: rating
func (_m *RatingRepository) InsertRating(rating *models.Rating) error {
	ret := _m.Called(rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Rating) error); ok {
		r0 = rf(rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertStat provides a mock function with given fields: userId
func (_m *RatingRepository) InsertStat(userId int64) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectRating provides a mock function with given fields: userFrom, userTo
func (_m *RatingRepository) SelectRating(userFrom int64, userTo int64) (*models.Rating, error) {
	ret := _m.Called(userFrom, userTo)

	var r0 *models.Rating
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Rating); ok {
		r0 = rf(userFrom, userTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userFrom, userTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectStat provides a mock function with given fields: userId
func (_m *RatingRepository) SelectStat(userId int64) (int64, int64, error) {
	ret := _m.Called(userId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(int64) int64); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRating provides a mock function with given fields: rating
func (_m *RatingRepository) UpdateRating(rating *models.Rating) error {
	ret := _m.Called(rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Rating) error); ok {
		r0 = rf(rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStat provides a mock function with given fields: userId, rate, count
func (_m *RatingRepository) UpdateStat(userId int64, rate int, count int) error {
	ret := _m.Called(userId, rate, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int, int) error); ok {
		r0 = rf(userId, rate, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
