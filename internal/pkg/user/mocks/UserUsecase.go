// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "yula/internal/models"
import multipart "mime/multipart"

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: _a0, gettedPassword
func (_m *UserUsecase) CheckPassword(_a0 *models.UserData, gettedPassword string) error {
	ret := _m.Called(_a0, gettedPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserData, string) error); ok {
		r0 = rf(_a0, gettedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *UserUsecase) Create(_a0 *models.UserSignUp) (*models.UserData, error) {
	ret := _m.Called(_a0)

	var r0 *models.UserData
	if rf, ok := ret.Get(0).(func(*models.UserSignUp) *models.UserData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.UserSignUp) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserUsecase) GetByEmail(email string) (*models.UserData, error) {
	ret := _m.Called(email)

	var r0 *models.UserData
	if rf, ok := ret.Get(0).(func(string) *models.UserData); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UserUsecase) GetById(id int64) (*models.Profile, error) {
	ret := _m.Called(id)

	var r0 *models.Profile
	if rf, ok := ret.Get(0).(func(int64) *models.Profile); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: userId, changePassword
func (_m *UserUsecase) UpdatePassword(userId int64, changePassword *models.ChangePassword) error {
	ret := _m.Called(userId, changePassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.ChangePassword) error); ok {
		r0 = rf(userId, changePassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: userId, userNew
func (_m *UserUsecase) UpdateProfile(userId int64, userNew *models.UserData) (*models.Profile, error) {
	ret := _m.Called(userId, userNew)

	var r0 *models.Profile
	if rf, ok := ret.Get(0).(func(int64, *models.UserData) *models.Profile); ok {
		r0 = rf(userId, userNew)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *models.UserData) error); ok {
		r1 = rf(userId, userNew)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAvatar provides a mock function with given fields: file, userId
func (_m *UserUsecase) UploadAvatar(file *multipart.FileHeader, userId int64) (*models.UserData, error) {
	ret := _m.Called(file, userId)

	var r0 *models.UserData
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, int64) *models.UserData); ok {
		r0 = rf(file, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, int64) error); ok {
		r1 = rf(file, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
