// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "yula/internal/models"

// CartUsecase is an autogenerated mock type for the CartUsecase type
type CartUsecase struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: userId, singleCart
func (_m *CartUsecase) AddToCart(userId int64, singleCart *models.CartHandler) error {
	ret := _m.Called(userId, singleCart)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.CartHandler) error); ok {
		r0 = rf(userId, singleCart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearAllCart provides a mock function with given fields: userId
func (_m *CartUsecase) ClearAllCart(userId int64) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: userId
func (_m *CartUsecase) GetCart(userId int64) ([]*models.Cart, error) {
	ret := _m.Called(userId)

	var r0 []*models.Cart
	if rf, ok := ret.Get(0).(func(int64) []*models.Cart); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderFromCart provides a mock function with given fields: userId, advertId
func (_m *CartUsecase) GetOrderFromCart(userId int64, advertId int64) (*models.Cart, error) {
	ret := _m.Called(userId, advertId)

	var r0 *models.Cart
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Cart); ok {
		r0 = rf(userId, advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userId, advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeOrder provides a mock function with given fields: order, advert, salesman
func (_m *CartUsecase) MakeOrder(order *models.Cart, advert *models.Advert, salesman *models.Profile) error {
	ret := _m.Called(order, advert, salesman)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Cart, *models.Advert, *models.Profile) error); ok {
		r0 = rf(order, advert, salesman)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFromCart provides a mock function with given fields: userId, advertId
func (_m *CartUsecase) RemoveFromCart(userId int64, advertId int64) error {
	ret := _m.Called(userId, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllCart provides a mock function with given fields: userId, _a1, adverts
func (_m *CartUsecase) UpdateAllCart(userId int64, _a1 []*models.CartHandler, adverts []*models.Advert) ([]*models.Cart, []*models.Advert, []string, error) {
	ret := _m.Called(userId, _a1, adverts)

	var r0 []*models.Cart
	if rf, ok := ret.Get(0).(func(int64, []*models.CartHandler, []*models.Advert) []*models.Cart); ok {
		r0 = rf(userId, _a1, adverts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Cart)
		}
	}

	var r1 []*models.Advert
	if rf, ok := ret.Get(1).(func(int64, []*models.CartHandler, []*models.Advert) []*models.Advert); ok {
		r1 = rf(userId, _a1, adverts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*models.Advert)
		}
	}

	var r2 []string
	if rf, ok := ret.Get(2).(func(int64, []*models.CartHandler, []*models.Advert) []string); ok {
		r2 = rf(userId, _a1, adverts)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(int64, []*models.CartHandler, []*models.Advert) error); ok {
		r3 = rf(userId, _a1, adverts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateCart provides a mock function with given fields: userId, singleCart, maxAmount
func (_m *CartUsecase) UpdateCart(userId int64, singleCart *models.CartHandler, maxAmount int64) (*models.Cart, error) {
	ret := _m.Called(userId, singleCart, maxAmount)

	var r0 *models.Cart
	if rf, ok := ret.Get(0).(func(int64, *models.CartHandler, int64) *models.Cart); ok {
		r0 = rf(userId, singleCart, maxAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *models.CartHandler, int64) error); ok {
		r1 = rf(userId, singleCart, maxAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
