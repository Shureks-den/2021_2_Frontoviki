// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "yula/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// AdvtRepository is an autogenerated mock type for the AdvtRepository type
type AdvtRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: advertId
func (_m *AdvtRepository) Delete(advertId int64) error {
	ret := _m.Called(advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFavorite provides a mock function with given fields: userId, advertId
func (_m *AdvtRepository) DeleteFavorite(userId int64, advertId int64) error {
	ret := _m.Called(userId, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImages provides a mock function with given fields: images, advertId
func (_m *AdvtRepository) DeleteImages(images []string, advertId int64) error {
	ret := _m.Called(images, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, int64) error); ok {
		r0 = rf(images, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: advert
func (_m *AdvtRepository) Insert(advert *models.Advert) error {
	ret := _m.Called(advert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Advert) error); ok {
		r0 = rf(advert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertFavorite provides a mock function with given fields: userId, advertId
func (_m *AdvtRepository) InsertFavorite(userId int64, advertId int64) error {
	ret := _m.Called(userId, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertImages provides a mock function with given fields: advertId, newImages
func (_m *AdvtRepository) InsertImages(advertId int64, newImages []string) error {
	ret := _m.Called(advertId, newImages)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string) error); ok {
		r0 = rf(advertId, newImages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegenerateRecomendations provides a mock function with given fields:
func (_m *AdvtRepository) RegenerateRecomendations() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAdvertsByCategory provides a mock function with given fields: categoryName, from, count
func (_m *AdvtRepository) SelectAdvertsByCategory(categoryName string, from int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(categoryName, from, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*models.Advert); ok {
		r0 = rf(categoryName, from, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(categoryName, from, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAdvertsByPublisherId provides a mock function with given fields: publisherId, is_active, offset, limit
func (_m *AdvtRepository) SelectAdvertsByPublisherId(publisherId int64, is_active bool, offset int64, limit int64) ([]*models.Advert, error) {
	ret := _m.Called(publisherId, is_active, offset, limit)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, bool, int64, int64) []*models.Advert); ok {
		r0 = rf(publisherId, is_active, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool, int64, int64) error); ok {
		r1 = rf(publisherId, is_active, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: advertId
func (_m *AdvtRepository) SelectById(advertId int64) (*models.Advert, error) {
	ret := _m.Called(advertId)

	var r0 *models.Advert
	if rf, ok := ret.Get(0).(func(int64) *models.Advert); ok {
		r0 = rf(advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDummyRecomendations provides a mock function with given fields: advertId, count
func (_m *AdvtRepository) SelectDummyRecomendations(advertId int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(advertId, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64) []*models.Advert); ok {
		r0 = rf(advertId, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(advertId, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFavorite provides a mock function with given fields: userId, advertId
func (_m *AdvtRepository) SelectFavorite(userId int64, advertId int64) (*models.Advert, error) {
	ret := _m.Called(userId, advertId)

	var r0 *models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64) *models.Advert); ok {
		r0 = rf(userId, advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(userId, advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFavoriteAdverts provides a mock function with given fields: userId, from, count
func (_m *AdvtRepository) SelectFavoriteAdverts(userId int64, from int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(userId, from, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64, int64) []*models.Advert); ok {
		r0 = rf(userId, from, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(userId, from, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFavoriteCount provides a mock function with given fields: advertId
func (_m *AdvtRepository) SelectFavoriteCount(advertId int64) (int64, error) {
	ret := _m.Called(advertId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectListAdvt provides a mock function with given fields: isSortedByPublichedDate, from, count
func (_m *AdvtRepository) SelectListAdvt(isSortedByPublichedDate bool, from int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(isSortedByPublichedDate, from, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(bool, int64, int64) []*models.Advert); ok {
		r0 = rf(isSortedByPublichedDate, from, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, int64, int64) error); ok {
		r1 = rf(isSortedByPublichedDate, from, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPriceHistory provides a mock function with given fields: advertId
func (_m *AdvtRepository) SelectPriceHistory(advertId int64) ([]*models.AdvertPrice, error) {
	ret := _m.Called(advertId)

	var r0 []*models.AdvertPrice
	if rf, ok := ret.Get(0).(func(int64) []*models.AdvertPrice); ok {
		r0 = rf(advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AdvertPrice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRecomendations provides a mock function with given fields: advertId, count, userId
func (_m *AdvtRepository) SelectRecomendations(advertId int64, count int64, userId int64) ([]*models.Advert, error) {
	ret := _m.Called(advertId, count, userId)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64, int64) []*models.Advert); ok {
		r0 = rf(advertId, count, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(advertId, count, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectViews provides a mock function with given fields: advertId
func (_m *AdvtRepository) SelectViews(advertId int64) (int64, error) {
	ret := _m.Called(advertId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newAdvert
func (_m *AdvtRepository) Update(newAdvert *models.Advert) error {
	ret := _m.Called(newAdvert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Advert) error); ok {
		r0 = rf(newAdvert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePrice provides a mock function with given fields: advertPrice
func (_m *AdvtRepository) UpdatePrice(advertPrice *models.AdvertPrice) error {
	ret := _m.Called(advertPrice)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AdvertPrice) error); ok {
		r0 = rf(advertPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePromo provides a mock function with given fields: promo
func (_m *AdvtRepository) UpdatePromo(promo *models.Promotion) error {
	ret := _m.Called(promo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Promotion) error); ok {
		r0 = rf(promo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateViews provides a mock function with given fields: advertId
func (_m *AdvtRepository) UpdateViews(advertId int64) error {
	ret := _m.Called(advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
