// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "yula/internal/models"

// AdvtRepository is an autogenerated mock type for the AdvtRepository type
type AdvtRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: advertId
func (_m *AdvtRepository) Delete(advertId int64) error {
	ret := _m.Called(advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditImages provides a mock function with given fields: advertId, newImages
func (_m *AdvtRepository) EditImages(advertId int64, newImages []string) error {
	ret := _m.Called(advertId, newImages)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []string) error); ok {
		r0 = rf(advertId, newImages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: advert
func (_m *AdvtRepository) Insert(advert *models.Advert) error {
	ret := _m.Called(advert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Advert) error); ok {
		r0 = rf(advert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAdvertsByCategory provides a mock function with given fields: categoryName, from, count
func (_m *AdvtRepository) SelectAdvertsByCategory(categoryName string, from int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(categoryName, from, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*models.Advert); ok {
		r0 = rf(categoryName, from, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(categoryName, from, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAdvertsByPublisherId provides a mock function with given fields: publisherId, is_active, offset, limit
func (_m *AdvtRepository) SelectAdvertsByPublisherId(publisherId int64, is_active bool, offset int64, limit int64) ([]*models.Advert, error) {
	ret := _m.Called(publisherId, is_active, offset, limit)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, bool, int64, int64) []*models.Advert); ok {
		r0 = rf(publisherId, is_active, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool, int64, int64) error); ok {
		r1 = rf(publisherId, is_active, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: advertId
func (_m *AdvtRepository) SelectById(advertId int64) (*models.Advert, error) {
	ret := _m.Called(advertId)

	var r0 *models.Advert
	if rf, ok := ret.Get(0).(func(int64) *models.Advert); ok {
		r0 = rf(advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectListAdvt provides a mock function with given fields: isSortedByPublichedDate, from, count
func (_m *AdvtRepository) SelectListAdvt(isSortedByPublichedDate bool, from int64, count int64) ([]*models.Advert, error) {
	ret := _m.Called(isSortedByPublichedDate, from, count)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(bool, int64, int64) []*models.Advert); ok {
		r0 = rf(isSortedByPublichedDate, from, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, int64, int64) error); ok {
		r1 = rf(isSortedByPublichedDate, from, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newAdvert
func (_m *AdvtRepository) Update(newAdvert *models.Advert) error {
	ret := _m.Called(newAdvert)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Advert) error); ok {
		r0 = rf(newAdvert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
