// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "yula/internal/models"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// AdvtUsecase is an autogenerated mock type for the AdvtUsecase type
type AdvtUsecase struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: userId, advertId
func (_m *AdvtUsecase) AddFavorite(userId int64, advertId int64) error {
	ret := _m.Called(userId, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdvertsToShort provides a mock function with given fields: adverts
func (_m *AdvtUsecase) AdvertsToShort(adverts []*models.Advert) []*models.AdvertShort {
	ret := _m.Called(adverts)

	var r0 []*models.AdvertShort
	if rf, ok := ret.Get(0).(func([]*models.Advert) []*models.AdvertShort); ok {
		r0 = rf(adverts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AdvertShort)
		}
	}

	return r0
}

// CloseAdvert provides a mock function with given fields: advertId, userId
func (_m *AdvtUsecase) CloseAdvert(advertId int64, userId int64) error {
	ret := _m.Called(advertId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(advertId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAdvert provides a mock function with given fields: userId, advert
func (_m *AdvtUsecase) CreateAdvert(userId int64, advert *models.Advert) error {
	ret := _m.Called(userId, advert)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.Advert) error); ok {
		r0 = rf(userId, advert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAdvert provides a mock function with given fields: advertId, userId
func (_m *AdvtUsecase) DeleteAdvert(advertId int64, userId int64) error {
	ret := _m.Called(advertId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(advertId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdvert provides a mock function with given fields: advertId, userId, updateViews
func (_m *AdvtUsecase) GetAdvert(advertId int64, userId int64, updateViews bool) (*models.Advert, error) {
	ret := _m.Called(advertId, userId, updateViews)

	var r0 *models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64, bool) *models.Advert); ok {
		r0 = rf(advertId, userId, updateViews)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(advertId, userId, updateViews)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdvertListByCategory provides a mock function with given fields: categoryName, page
func (_m *AdvtUsecase) GetAdvertListByCategory(categoryName string, page *models.Page) ([]*models.Advert, error) {
	ret := _m.Called(categoryName, page)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(string, *models.Page) []*models.Advert); ok {
		r0 = rf(categoryName, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *models.Page) error); ok {
		r1 = rf(categoryName, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdvertListByPublicherId provides a mock function with given fields: publisherId, is_active, page
func (_m *AdvtUsecase) GetAdvertListByPublicherId(publisherId int64, is_active bool, page *models.Page) ([]*models.Advert, error) {
	ret := _m.Called(publisherId, is_active, page)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, bool, *models.Page) []*models.Advert); ok {
		r0 = rf(publisherId, is_active, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, bool, *models.Page) error); ok {
		r1 = rf(publisherId, is_active, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdvertViews provides a mock function with given fields: advertId
func (_m *AdvtUsecase) GetAdvertViews(advertId int64) (int64, error) {
	ret := _m.Called(advertId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteCount provides a mock function with given fields: advertId
func (_m *AdvtUsecase) GetFavoriteCount(advertId int64) (int64, error) {
	ret := _m.Called(advertId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(advertId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFavoriteList provides a mock function with given fields: userId, page
func (_m *AdvtUsecase) GetFavoriteList(userId int64, page *models.Page) ([]*models.Advert, error) {
	ret := _m.Called(userId, page)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, *models.Page) []*models.Advert); ok {
		r0 = rf(userId, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, *models.Page) error); ok {
		r1 = rf(userId, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListAdvt provides a mock function with given fields: from, count, newest
func (_m *AdvtUsecase) GetListAdvt(from int64, count int64, newest bool) ([]*models.Advert, error) {
	ret := _m.Called(from, count, newest)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64, bool) []*models.Advert); ok {
		r0 = rf(from, count, newest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(from, count, newest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceHistory provides a mock function with given fields: advertId
func (_m *AdvtUsecase) GetPriceHistory(advertId int64) ([]*models.AdvertPrice, error) {
	ret := _m.Called(advertId)

	var r0 []*models.AdvertPrice
	if rf, ok := ret.Get(0).(func(int64) []*models.AdvertPrice); ok {
		r0 = rf(advertId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AdvertPrice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(advertId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecomendations provides a mock function with given fields: advertId, count, userId
func (_m *AdvtUsecase) GetRecomendations(advertId int64, count int64, userId int64) ([]*models.Advert, error) {
	ret := _m.Called(advertId, count, userId)

	var r0 []*models.Advert
	if rf, ok := ret.Get(0).(func(int64, int64, int64) []*models.Advert); ok {
		r0 = rf(advertId, count, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, int64) error); ok {
		r1 = rf(advertId, count, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFavorite provides a mock function with given fields: userId, advertId
func (_m *AdvtUsecase) RemoveFavorite(userId int64, advertId int64) error {
	ret := _m.Called(userId, advertId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, advertId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveImages provides a mock function with given fields: images, advertId, userId
func (_m *AdvtUsecase) RemoveImages(images []string, advertId int64, userId int64) error {
	ret := _m.Called(images, advertId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, int64, int64) error); ok {
		r0 = rf(images, advertId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdvert provides a mock function with given fields: advertId, newAdvert
func (_m *AdvtUsecase) UpdateAdvert(advertId int64, newAdvert *models.Advert) error {
	ret := _m.Called(advertId, newAdvert)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.Advert) error); ok {
		r0 = rf(advertId, newAdvert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdvertPrice provides a mock function with given fields: userId, adPrice
func (_m *AdvtUsecase) UpdateAdvertPrice(userId int64, adPrice *models.AdvertPrice) error {
	ret := _m.Called(userId, adPrice)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.AdvertPrice) error); ok {
		r0 = rf(userId, adPrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePromotion provides a mock function with given fields: userId, promo
func (_m *AdvtUsecase) UpdatePromotion(userId int64, promo *models.Promotion) error {
	ret := _m.Called(userId, promo)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *models.Promotion) error); ok {
		r0 = rf(userId, promo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadImages provides a mock function with given fields: files, advertId, userId
func (_m *AdvtUsecase) UploadImages(files []*multipart.FileHeader, advertId int64, userId int64) (*models.Advert, error) {
	ret := _m.Called(files, advertId, userId)

	var r0 *models.Advert
	if rf, ok := ret.Get(0).(func([]*multipart.FileHeader, int64, int64) *models.Advert); ok {
		r0 = rf(files, advertId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*multipart.FileHeader, int64, int64) error); ok {
		r1 = rf(files, advertId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
