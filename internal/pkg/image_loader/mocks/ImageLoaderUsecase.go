// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// ImageLoaderUsecase is an autogenerated mock type for the ImageLoaderUsecase type
type ImageLoaderUsecase struct {
	mock.Mock
}

// RemoveAdvertImages provides a mock function with given fields: imageUrls
func (_m *ImageLoaderUsecase) RemoveAdvertImages(imageUrls []string) error {
	ret := _m.Called(imageUrls)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(imageUrls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAvatar provides a mock function with given fields: filePath
func (_m *ImageLoaderUsecase) RemoveAvatar(filePath string) error {
	ret := _m.Called(filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: headerFile, dir
func (_m *ImageLoaderUsecase) Upload(headerFile *multipart.FileHeader, dir string) (string, error) {
	ret := _m.Called(headerFile, dir)

	var r0 string
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) string); ok {
		r0 = rf(headerFile, dir)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(headerFile, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAdvertImages provides a mock function with given fields: headerFiles
func (_m *ImageLoaderUsecase) UploadAdvertImages(headerFiles []*multipart.FileHeader) ([]string, error) {
	ret := _m.Called(headerFiles)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]*multipart.FileHeader) []string); ok {
		r0 = rf(headerFiles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*multipart.FileHeader) error); ok {
		r1 = rf(headerFiles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAvatar provides a mock function with given fields: headerFile
func (_m *ImageLoaderUsecase) UploadAvatar(headerFile *multipart.FileHeader) (string, error) {
	ret := _m.Called(headerFile)

	var r0 string
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(headerFile)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(headerFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
