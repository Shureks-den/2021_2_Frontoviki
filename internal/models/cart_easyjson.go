// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdb0949aDecodeYulaInternalModels(in *jlexer.Lexer, out *CartList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = int64(in.Int64())
		case "AdvertsCart":
			if in.IsNull() {
				in.Skip()
				out.AdvertsCart = nil
			} else {
				in.Delim('[')
				if out.AdvertsCart == nil {
					if !in.IsDelim(']') {
						out.AdvertsCart = make([]*CartHandler, 0, 8)
					} else {
						out.AdvertsCart = []*CartHandler{}
					}
				} else {
					out.AdvertsCart = (out.AdvertsCart)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *CartHandler
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(CartHandler)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.AdvertsCart = append(out.AdvertsCart, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeYulaInternalModels(out *jwriter.Writer, in CartList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserId))
	}
	{
		const prefix string = ",\"AdvertsCart\":"
		out.RawString(prefix)
		if in.AdvertsCart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AdvertsCart {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeYulaInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeYulaInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeYulaInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeYulaInternalModels(l, v)
}
func easyjsonDdb0949aDecodeYulaInternalModels1(in *jlexer.Lexer, out *CartHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advert_id":
			out.AdvertId = int64(in.Int64())
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeYulaInternalModels1(out *jwriter.Writer, in CartHandler) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advert_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AdvertId))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeYulaInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeYulaInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeYulaInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeYulaInternalModels1(l, v)
}
func easyjsonDdb0949aDecodeYulaInternalModels2(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int64(in.Int64())
		case "advert_id":
			out.AdvertId = int64(in.Int64())
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeYulaInternalModels2(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserId))
	}
	{
		const prefix string = ",\"advert_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AdvertId))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeYulaInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeYulaInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeYulaInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeYulaInternalModels2(l, v)
}
func easyjsonDdb0949aDecodeYulaInternalModels3(in *jlexer.Lexer, out *CHs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CHs, 0, 8)
			} else {
				*out = CHs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *CartHandler
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(CartHandler)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeYulaInternalModels3(out *jwriter.Writer, in CHs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CHs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeYulaInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CHs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeYulaInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CHs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeYulaInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CHs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeYulaInternalModels3(l, v)
}
