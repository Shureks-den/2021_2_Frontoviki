// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298DecodeYulaInternalModels(in *jlexer.Lexer, out *SearchFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Query":
			out.Query = string(in.String())
		case "Category":
			out.Category = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "TimeDuration":
			out.TimeDuration = int64(in.Int64())
		case "Latitude":
			out.Latitude = float64(in.Float64())
		case "Longitude":
			out.Longitude = float64(in.Float64())
		case "Radius":
			out.Radius = int64(in.Int64())
		case "SortingDate":
			out.SortingDate = bool(in.Bool())
		case "SortingName":
			out.SortingName = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeYulaInternalModels(out *jwriter.Writer, in SearchFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"Category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"TimeDuration\":"
		out.RawString(prefix)
		out.Int64(int64(in.TimeDuration))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"Radius\":"
		out.RawString(prefix)
		out.Int64(int64(in.Radius))
	}
	{
		const prefix string = ",\"SortingDate\":"
		out.RawString(prefix)
		out.Bool(bool(in.SortingDate))
	}
	{
		const prefix string = ",\"SortingName\":"
		out.RawString(prefix)
		out.Bool(bool(in.SortingName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeYulaInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeYulaInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeYulaInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeYulaInternalModels(l, v)
}
