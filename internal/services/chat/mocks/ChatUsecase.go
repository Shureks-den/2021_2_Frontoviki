// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "yula/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ChatUsecase is an autogenerated mock type for the ChatUsecase type
type ChatUsecase struct {
	mock.Mock
}

// Clear provides a mock function with given fields: iDialog
func (_m *ChatUsecase) Clear(iDialog *models.IDialog) error {
	ret := _m.Called(iDialog)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.IDialog) error); ok {
		r0 = rf(iDialog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: message
func (_m *ChatUsecase) Create(message *models.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDialog provides a mock function with given fields: dialog
func (_m *ChatUsecase) CreateDialog(dialog *models.Dialog) error {
	ret := _m.Called(dialog)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Dialog) error); ok {
		r0 = rf(dialog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDialogs provides a mock function with given fields: idFrom
func (_m *ChatUsecase) GetDialogs(idFrom int64) ([]*models.Dialog, error) {
	ret := _m.Called(idFrom)

	var r0 []*models.Dialog
	if rf, ok := ret.Get(0).(func(int64) []*models.Dialog); ok {
		r0 = rf(idFrom)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Dialog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idFrom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: iDialog, offset, limit
func (_m *ChatUsecase) GetHistory(iDialog *models.IDialog, offset int64, limit int64) ([]*models.Message, error) {
	ret := _m.Called(iDialog, offset, limit)

	var r0 []*models.Message
	if rf, ok := ret.Get(0).(func(*models.IDialog, int64, int64) []*models.Message); ok {
		r0 = rf(iDialog, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.IDialog, int64, int64) error); ok {
		r1 = rf(iDialog, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
